/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type ExampleMessageStruct = {
  message: string;
  value: BigNumberish;
  from: AddressLike;
  to: AddressLike;
};

export type ExampleMessageStructOutput = [
  message: string,
  value: bigint,
  from: string,
  to: string
] & { message: string; value: bigint; from: string; to: string };

export interface EIP712ExampleInterface extends Interface {
  getFunction(
    nameOrSignature: "getBalance" | "verifyMessage"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AddressVerified"): EventFragment;

  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMessage",
    values: [ExampleMessageStruct, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyMessage",
    data: BytesLike
  ): Result;
}

export namespace AddressVerifiedEvent {
  export type InputTuple = [_from: AddressLike];
  export type OutputTuple = [_from: string];
  export interface OutputObject {
    _from: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface EIP712Example extends BaseContract {
  connect(runner?: ContractRunner | null): EIP712Example;
  waitForDeployment(): Promise<this>;

  interface: EIP712ExampleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  verifyMessage: TypedContractMethod<
    [
      message: ExampleMessageStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "verifyMessage"
  ): TypedContractMethod<
    [
      message: ExampleMessageStruct,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddressVerified"
  ): TypedContractEvent<
    AddressVerifiedEvent.InputTuple,
    AddressVerifiedEvent.OutputTuple,
    AddressVerifiedEvent.OutputObject
  >;

  filters: {
    "AddressVerified(address)": TypedContractEvent<
      AddressVerifiedEvent.InputTuple,
      AddressVerifiedEvent.OutputTuple,
      AddressVerifiedEvent.OutputObject
    >;
    AddressVerified: TypedContractEvent<
      AddressVerifiedEvent.InputTuple,
      AddressVerifiedEvent.OutputTuple,
      AddressVerifiedEvent.OutputObject
    >;
  };
}
